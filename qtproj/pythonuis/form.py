# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'form.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import pyqtSlot
import mimetypes
import smtplib
import mammoth
import string
import openpyxl
import json
import os
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart


def remove_ws(text):
    for x in string.whitespace:
        text = text.replace(x, "")
    return text


obj = None


def load_template(file_name):
    html = None
    with open(file_name, "rb") as u_file:
        if file_name[-4:] == "docx":
            text = mammoth.extract_raw_text(u_file).value
            html = mammoth.convert_to_html(u_file).value
            html = "<html><head><head><body>" + html + "<body><html>"

        else:
            text = u_file.read().decode()
        u_file.close()
    return [text, html]


def send_email(recipient, content, subject, server, attachment=None):
    message = MIMEMultipart('alternative')

    message["subject"] = subject

    if content:
        if content[1]:
            txt = MIMEText(content[1], "html")
            message.attach(txt)

        elif content[0]:
            txt = MIMEText(content[0], "plain")
            message.attach(txt)

    if attachment:
        mime_type, _ = mimetypes.guess_type(attachment)
        mime_type, mime_subtype = mime_type.split('/')
        with open(attachment, 'rb') as file:
            message.add_attachment(file.read(),
                                   maintype=mime_type,
                                   subtype=mime_subtype,
                                   filename=attachment)

    message["From"] = "emailautoformatter@gmail.com"
    message["To"] = recipient

    server.send_message(message)


class loading_screen:
    pass


class Ui_mainWindow(object):

    def setupUi(self, mainWindow):
        global obj

        mainWindow.setObjectName("mainWindow")
        mainWindow.resize(600, 500)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(mainWindow.sizePolicy().hasHeightForWidth())
        mainWindow.setSizePolicy(sizePolicy)
        mainWindow.setMinimumSize(QtCore.QSize(600, 500))
        mainWindow.setMaximumSize(QtCore.QSize(600, 500))
        self.templatePreview = QtWidgets.QTextEdit(mainWindow)
        self.templatePreview.setGeometry(QtCore.QRect(140, 10, 451, 481))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.templatePreview.sizePolicy().hasHeightForWidth())
        self.templatePreview.setSizePolicy(sizePolicy)
        self.templatePreview.setObjectName("templatePreview")
        self.templatePreview.setReadOnly(True)
        self.verticalLayoutWidget = QtWidgets.QWidget(mainWindow)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(10, 0, 120, 500))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.addTemplateButton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.addTemplateButton.setObjectName("addTemplateButton")
        self.verticalLayout.addWidget(self.addTemplateButton)
        self.addEmailButton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.addEmailButton.setObjectName("addEmailButton")
        self.verticalLayout.addWidget(self.addEmailButton)
        self.addTagButton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.addTagButton.setObjectName("addTagButton")
        self.verticalLayout.addWidget(self.addTagButton)
        self.tagList = QtWidgets.QListWidget(self.verticalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tagList.sizePolicy().hasHeightForWidth())
        self.tagList.setSizePolicy(sizePolicy)
        self.tagList.setToolTip("List of tags loaded")
        self.verticalLayout.addWidget(self.tagList)
        self.sendButton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.sendButton.setObjectName("sendButton")
        self.verticalLayout.addWidget(self.sendButton)
        self.tagListLabel = QtWidgets.QLabel(mainWindow)
        self.tagListLabel.setText("Tags Loaded")
        self.tagListLabel.setGeometry(40, 196, 61, 20)

        self.sendButton.clicked.connect(self.send_but)
        self.addEmailButton.clicked.connect(self.add_emails)
        self.addTemplateButton.clicked.connect(self.add_template)
        self.addTagButton.clicked.connect(self.add_tags)

        self.root_folder = "C:/Users/benja/PycharmProjects/qtproj"
        self.data_file = os.getcwd().replace("\\", "/") + "/data"
        self.template_file = ""
        self.email_file = ""
        self.tag_files = []
        self.threadPool = QtCore.QThreadPool()

        self.load_data()
        obj = self

        self.retranslateUi(mainWindow)
        QtCore.QMetaObject.connectSlotsByName(mainWindow)

    def retranslateUi(self, mainWindow):
        _translate = QtCore.QCoreApplication.translate
        mainWindow.setWindowTitle(_translate("mainWindow", "Auto Email Formatter"))
        self.addTemplateButton.setText(_translate("mainWindow", "Add Template"))
        self.addEmailButton.setText(_translate("mainWindow", "Add Emails"))
        self.addTagButton.setText(_translate("mainWindow", "Add Tags"))
        __sortingEnabled = self.tagList.isSortingEnabled()
        self.tagList.setSortingEnabled(True)
        self.tagList.setSortingEnabled(__sortingEnabled)
        self.sendButton.setText(_translate("mainWindow", "Send Emails"))

    def send_but(self):
        worker = Worker()
        self.threadPool.start(worker)

    def save_data(self, key, data):
        try:
            with open(self.data_file + "/data.json", "r") as file:
                loaded = json.load(file)
                file.close()
            with open(self.data_file + "/data.json", "w") as file:
                loaded[key] = data
                json.dump(loaded, file)
                file.close()
        except Exception as e:
            error_dialog = QtWidgets.QErrorMessage()
            error_dialog.showMessage("Error: " + str(e))

    def load_preview(self):
        if self.template_file:
            text = load_template(self.template_file)
            if text[1]:
                self.templatePreview.setHtml(text[1])
            else:
                self.templatePreview.setText(text[0])

    def disable_buts(self):
        self.addTagButton.setDisabled(True)
        self.sendButton.setDisabled(True)
        self.addEmailButton.setDisabled(True)
        self.addTemplateButton.setDisabled(True)

    def enable_buts(self):
        self.addTagButton.setDisabled(False)
        self.sendButton.setDisabled(False)
        self.addEmailButton.setDisabled(False)
        self.addTemplateButton.setDisabled(False)

    def load_data(self):
        try:
            if not os.path.isdir(self.data_file):
                os.mkdir(self.data_file)
            if not os.path.isfile(self.data_file + "/data.json"):
                with open(self.data_file + "/data.json", "w") as file:
                    json.dump({}, file)
                    file.close()
            with open(self.data_file + "/data.json", "r") as file:
                loaded = json.load(file)
                for x in ["tag_files", "root_folder", "template_file", "email_file"]:
                    try:
                        loaded[x]
                    except KeyError:
                        continue
                    self.__setattr__(x, loaded[x])

                file.close()
            for x in self.tag_files:
                try:
                    open(x, "r").close()
                except:
                    self.tag_files.remove(x)
                    continue
                item = QtWidgets.QListWidgetItem(x.split("/")[-1].replace(".txt", ""))
                self.tagList.addItem(item)
                self.load_preview()
        except Exception as e:
            error_dialog = QtWidgets.QErrorMessage()
            error_dialog.showMessage("Error: " + str(e))

    "@pyqtSlot()"

    def add_template(self):
        filename, _ = QtWidgets.QFileDialog.getOpenFileName(None, "Select Text File", self.root_folder,
                                                            "Text Files (*.txt *.docx)")
        if not filename:
            return
        try:
            open(filename, "r").close()
        except:
            return
        self.template_file = filename
        self.root_folder = "/".join(filename.split("/")[:-1])
        self.save_data("template_file", self.template_file)
        self.save_data("root_folder", self.root_folder)
        self.load_preview()

    "@pyqtSlot()"

    def add_emails(self):
        filename, _ = QtWidgets.QFileDialog.getOpenFileName(None, "Select Text File", self.root_folder,
                                                            "Text Files (*.txt)")
        if not filename:
            return
        try:
            open(filename, "r").close()
        except:
            return
        self.email_file = filename
        self.root_folder = "/".join(filename.split("/")[:-1])
        self.save_data("email_file", self.email_file)
        self.save_data("root_folder", self.root_folder)

    "@pyqtSlot()"

    def add_tags(self):
        filename, _ = QtWidgets.QFileDialog.getOpenFileName(None, "Select Text File", self.root_folder,
                                                            "Text Files (*.txt)")
        if not filename:
            return
        try:
            open(filename, "r").close()
        except:
            return
        if filename not in self.tag_files:
            self.tag_files.append(filename)
            item = QtWidgets.QListWidgetItem(filename.split("/")[-1].replace(".txt", ""))
            self.tagList.addItem(item)
        self.root_folder = "/".join(filename.split("/")[:-1])
        self.save_data("tag_files", self.tag_files)
        self.save_data("root_folder", self.root_folder)

    "@pyqtSlot()"

    def send_emails(self):
        # make sure all the files are ready to go
        if not self.template_file:
            error_dialog = QtWidgets.QErrorMessage()
            error_dialog.showMessage("No template selected")
            return
        if not self.email_file:
            error_dialog = QtWidgets.QErrorMessage()
            error_dialog.showMessage("No emails file selected")
            return
        if not self.tag_files:
            error_dialog = QtWidgets.QErrorMessage()
            error_dialog.showMessage("No tag files selected")
            return
        email = "emailautoformatter@gmail.com"
        # log into email server
        mail_server = smtplib.SMTP_SSL("smtp.gmail.com")
        mail_server.login(email, "Bw0777$$$")
        with open(self.email_file, "rb") as emails:
            workbook = openpyxl.Workbook()
            sheet = workbook.active
            tags = {}
            # load all tags in=to a dict
            for x in self.tag_files:
                file = open(x, "rb")
                x = x.split("/")[-1]
                tags[x.replace(".txt", "")] = [remove_ws(y.decode()) for y in file.readlines()]
            template = load_template(self.template_file)
            temp_let = template
            # go through all emails
            for i, email_ in enumerate(emails.readlines()):
                sheet.cell(row=i + 2, column=1).value = email_
                # go through each tag and replace each tag with the appropriately indexed items within the tag file
                for p, x in enumerate(tags):
                    sheet.cell(row=1, column=p + 2).value = "[" + x + "]"
                    for o, thing in enumerate(temp_let):
                        if thing:
                            temp_let[o] = thing.replace("[" + x + "]", tags[x][i])
                    sheet.cell(row=i + 2, column=p + 2).value = tags[x][i]
                send_email(email_.decode(), temp_let, "temp", mail_server)
                temp_let = load_template(self.template_file)
        workbook.save(filename="output.xlsx")
        mail_server.close()


class Worker(QtCore.QRunnable):
    def run(self):
        obj.disable_buts()
        obj.send_emails()
        obj.enable_buts()


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    mainWindow = QtWidgets.QMainWindow()
    ui = Ui_mainWindow()
    ui.setupUi(mainWindow)
    mainWindow.show()
    sys.exit(app.exec_())
